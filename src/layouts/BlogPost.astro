---
import Main from "./Main.astro";
import DisqusThread from "../components/DisqusThread.astro";
import site from "../data/config";
import {type PostData, getCategoriesFromPostData, getActivePostsCollection} from "../utils/utils";
import ArrowLeft from "../assets/icons/arrow-left.svg";
import ArrowRight from "../assets/icons/arrow-right.svg";

interface Props {
  post: PostData;
}

const { post } = Astro.props as Props;

const categories = getCategoriesFromPostData(post.categories || []);

const posts = await getActivePostsCollection();
const currentPostIndex = posts.findIndex((p) => p.id == post.id);
const previousPost = currentPostIndex + 1 === posts.length ? undefined : posts[currentPostIndex + 1];
const prevUrl = previousPost?.data.url ?? null;

const nextPost = currentPostIndex === 0 ? undefined : posts[currentPostIndex - 1];
const nextUrl = nextPost?.data.url ?? null;

const meta = [
  { "property": "og:type", content: 'article' },
  { "property": "og:title", content: post.title },
  { "property": "og:description", content: post.description || post.excerpt },
  { "property": "og:url", content: Astro.url.href },
  { "property": "article:published_time", content: post.date.toISO() },
  { "property": "article:modified_time", content: post.date.toISO() },
  { "property": "twitter:description", content: post.description || post.excerpt },
  { "property": "twitter:title", content: post.title },
  { "property": "twitter:site", content: site.twitter },
  { "property": "twitter:card", content: "summary_large_image" },
  { "property": "twitter:creator", content: site.twitter },
];
if (post.image) {
    meta.push({ "property": "twitter:image", content: new URL(post.image.src, Astro.site) });
    meta.push({ "property": "og:image", content: new URL(post.image.src, Astro.site) });
    meta.push({ "property": "og:image:width", content: post.image.width });
    meta.push({ "property": "og:image:height", content: post.image.height });
}
categories.forEach(category => {
  meta.push({ "property": "article:tag", content: category.name });
});

const schema = {
  "@context": "https://schema.org",
  "@type": "Blog",
  "blogPost": {
    "@type": "BlogPosting",
    "@id": Astro.url.href,
    "headline": post.title,
    "name": post.title,
    "description": post.description || post.excerpt,
    "datePublished": post.date.toISO(),
    "dateModified": post.date.toISO(),
    "image": post.image ? {
      "@type": "ImageObject",
      "url": new URL(post.image.src, Astro.site),
      "width": post.image.width,
      "height": post.image.height
    } : null,
    "author": {
      "@type": "Person",
      "name": post.author,
    },
    "publisher": {
      "@type": "Person",
      "name": site.author,
      "sameAs": ["https://x.com/spekkionu"]
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": Astro.url.href
    },
    "keywords": post.categories.join(', ')
  },
};

---
<Main title={post.title} meta_description={post.meta_description || post.description} meta_tags={meta} author={post.author} noindex={post.noindex}>
  <script slot="schema" type="application/ld+json" set:html={JSON.stringify(schema)} />
  <Fragment slot="head">
    {post.prev || prevUrl ? <link rel="prev" href={post.prev ? site.url + post.prev : prevUrl} /> : null}
    {post.next || nextUrl ? <link rel="next" href={post.next ? site.url + post.next : nextUrl} /> : null}
  </Fragment>
  <article class="post h-entry hentry">
    <h1 class="post__title p-name entry-title">{post.title}</h1>
    <time class="post__date dt-published published" datetime={post.date.toISO()}>{post.date.toFormat('DDD')}</time>
    <div class="post__author p-author author h-card vcard">
      <span class="p-name">{post.author}</span>
    </div>
    <div class="post__categories">
      <strong>Categories:</strong>
      {categories.map(cat => (
        <a class="posts__post__category" href={cat.url}>{cat.name}</a>
      ))}
    </div>
    <div class="post__content e-content entry-content"><slot /></div>
  </article>

  <div class="pagination">
    <div class="pagination__item pagination__item--previous">
      {previousPost ? <a class="pagination__link" href={prevUrl}><ArrowLeft class="icon" role="img" aria-hidden="true" /> Newer</a> : ''}
    </div>
    <div class="pagination__item pagination__item--archive">
      <a class="pagination__link" href="/archives/">Blog Archives</a>
    </div>
    <div class="pagination__item pagination__item--next">
      {nextPost ? <a class="pagination__link" href={nextUrl}>Older <ArrowRight class="icon" role="img" aria-hidden="true" /></a> : ''}
    </div>
  </div>


  {
    site.comments_enabled && site.disqus_short_name && post.comments && (
      <section class="post__comments">
        <h1>Comments</h1>
        <DisqusThread url={post.full_url} title={post.title} />
      </section>
    )
  }

</Main>
